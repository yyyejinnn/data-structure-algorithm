/**
 * * AVL tree vs. Red-Black tree
 * - RB tree가 비교적 느슨하다.
 * - 삽입, 제거 시 회전이 더 적음
 *   -> 삽입, 제거 속도가 더 빠름
 *   -> 검색 속도는 더 느림
 *
 * * Red-Black tree 규칙
 * 1. 모든 노드는 빨간색/검은색 두 가지 색 중 하나를 가지고 있다.
 * 2. 루트노드는 항상 검은색
 * 3. 모든 터미널 노드(NIL)는 검은색
 * 4. 연속해서 빨간색 노드가 올 수 없다.
 * 5. 루트노드 ~ NIL 노드까지 모든 경로에는 같은 수의 검은색 노드가 있어야 한다.
 *   -> 구현의 편의를 위해 NIL 노드 하나로..? ㅎ
 *
 * * Black height?
 * - 루트노드 ~ 터미널 노트까지의 검은색 노드 갯수
 *
 * ***** *****
 *
 * * 삽입
 * - 노드 회전 + 색 다시 칠하는 작업 필요 (recoloring)
 * - 삽입되는 노드는 무조건 빨간색
 * - 균형 잡아주는 함수 필요 (rebalanceAfterInsertion)
 *
 * * rebalanceAfterInsertion 처리해야하는 것
 * 1. 새로운 노드가 루트노드인 경우
 *   - 검정색으로 recoloring (2번 규칙)
 * 2. 부모노드와 삼촌노드가 빨간색인 경우
 *   - 부모+삼촌 노드는 검정색으로, 할아버지 노드는 빨간색으로 recoloring
 * 3. 부모노드 빨, 삼촌노드 검, 삽입 노드는 안쪽 손자인 경우
 *   - 안쪽 손자: 할아버지 노드 기준으로 부모, 삽입 노드 모양이 삼각형을 이룬 경우
 *   - 할아버지 노드 기준 RL 회전하고 색칠하기 ^^,,
 * 4. 부모노드 빨, 삼촌노드 검, 삽입 노드는 바깥쪽 손자인 경우
 *   - 바깥쪽 손자: 할-부-삽입 노드가 일자 모양
 *   - 할아버지 노드 기준 LL 회전하고 색칠하기
 *
 * ***** *****
 *
 * * 제거 (이진탐색트리 -> RB 트리 제거)
 * 1. 터미널 노드 제거하는 경우            -> 두 개의 자식노드 모두 NIL 노드인 경우
 * 2. 자식노드가 한 개인 노드 제거 하는 경우  -> 한 개가 NIL 노드인 경우
 * 3. 자식노드가 두 개인 노드 제거 하는 경우  -> 자식노드 중 NIL 노드가 하나도 없는 경우
 *
 * -> 이진 탐색 트리와 동일하지만 "균형 잡는" 추가적인 작업 필요
 *
 * * 제거한 노드가 검정색일 때, 균형 잡기위해 처리해야 할 경우
 * 1. 형제 노드가 빨간색인 경우
 * 2. 형제 노드와 형제노드의 두 자식노드가 모두 검은색이고 부모노드는 빨간색인 경우
 * 3. 형제 노드와 형제노드의 두 자식노드, 부모노드가 모두 검은색인 경우
 * 4. 형제 노드가 검은색이고 형제의 두 자식노드 중 하나라도 빨간색 노드가 있고, "바깥쪽 조카 노드"가 검은색인 경우
 * 5. 4번과 동일, "바깥쪽 조카 노드"가 빨간색인 경우
 */
